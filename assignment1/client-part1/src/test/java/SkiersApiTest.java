/*
 * Ski Data API for NEU Seattle distributed systems course
 * An API for an emulation of skier managment system for RFID tagged lift tickets. Basis for CS6650 Assignments for 2019
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.api.SkiersApi;
import io.swagger.client.model.LiftRide;
import io.swagger.client.model.SkierVertical;
import java.util.ArrayList;
import java.util.List;
import org.junit.Ignore;
import org.junit.Test;


/**
 * API tests for SkiersApi
 */
@Ignore
public class SkiersApiTest {
    ApiClient apiClient = new ApiClient();

    SkiersApi api = new SkiersApi(apiClient);

    public SkiersApiTest() {
        api.getApiClient().setBasePath("http://localhost:8080/server_war_exploded");
    }

    /**
     * get ski day vertical for a skier
     *
     * get the total vertical for the skier for the specified ski day
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSkierDayVerticalTest() throws Exception {
        Integer resortID = 1;
        String seasonID = "2022";
        String dayID = "316";
        Integer skierID = 23;
        try {
            Integer response = api.getSkierDayVertical(resortID, seasonID, dayID, skierID);
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#addSeason");
            e.printStackTrace();
        }


        // TODO: test validations
    }
    /**
     * get the total vertical for the skier for specified seasons at the specified resort
     *
     * get the total vertical for the skier the specified resort. If no season is specified, return all seasons
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSkierResortTotalsTest() throws Exception {
        Integer skierID = 23;
        List<String> resort = new ArrayList<>();
        List<String> season = new ArrayList<>();

        try {
            SkierVertical response = api.getSkierResortTotals(skierID, resort, season);
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#addSeason");
            e.printStackTrace();
        }
        // TODO: test validations
    }
    /**
     * write a new lift ride for the skier
     *
     * Stores new lift ride details in the data store
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void writeNewLiftRideTest() throws Exception {
        LiftRide body = new LiftRide();
        body.setLiftID(32);
        body.setTime(2);
        Integer resortID = 1;
        String seasonID = "2022";
        String dayID = "1";
        Integer skierID = 15;
        ApiResponse<Void> res;
        try {
            api.writeNewLiftRideWithHttpInfo(body, resortID, seasonID, dayID, skierID);
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#addSeason");
            e.printStackTrace();
        }
        // TODO: test validations
    }

    @Test
    public void directTest() throws ApiException {
        LiftRide liftRide = new LiftRide();
        liftRide.setLiftID(32);
        liftRide.setTime(2);
        ApiResponse<Void> res = api.writeNewLiftRideWithHttpInfo(liftRide, 1, "2022", "813", 234);
        System.out.print(res.getStatusCode());
    }
}
