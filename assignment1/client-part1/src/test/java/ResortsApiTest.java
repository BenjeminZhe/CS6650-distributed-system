/*
 * Ski Data API for NEU Seattle distributed systems course
 * An API for an emulation of skier managment system for RFID tagged lift tickets. Basis for CS6650 Assignments for 2019
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import io.swagger.client.ApiException;
import io.swagger.client.api.ResortsApi;
import io.swagger.client.model.ResortIDSeasonsBody;
import io.swagger.client.model.ResortSkiers;
import io.swagger.client.model.ResortsList;
import io.swagger.client.model.SeasonsList;
import org.junit.Ignore;
import org.junit.Test;


/**
 * API tests for ResortsApi
 */
@Ignore
public class ResortsApiTest {

    private final ResortsApi api = new ResortsApi();

    public ResortsApiTest() {
        api.getApiClient().setBasePath("http://localhost:8080/server_war_exploded");
    }

    /**
     * Add a new season for a resort
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addSeasonTest() throws Exception {
        ResortIDSeasonsBody body = new ResortIDSeasonsBody();
        Integer resortID = 1;
        try {
            api.addSeason(body, resortID);
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#addSeason");
            e.printStackTrace();
        }


        // TODO: test validations

    }
    /**
     * get a list of seasons for the specified resort
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getResortSeasonsTest() throws Exception {
        Integer resortID = 1;
        try {
            SeasonsList response = api.getResortSeasons(resortID);
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#getResortSeasons");
            e.printStackTrace();
        }
        // TODO: test validations
    }
    /**
     * get number of unique skiers at resort/season/day
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getResortSkiersDayTest() throws Exception {
        Integer resortID = 1;
        Integer seasonID = 2020;
        Integer dayID = 318;
        try {
            ResortSkiers response = api.getResortSkiersDay(resortID, seasonID, dayID);
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#getResortSeasons");
            e.printStackTrace();
        }
        // TODO: test validations
    }
    /**
     * get a list of ski resorts in the database
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getResortsTest() throws Exception {
        try {
            ResortsList response = api.getResorts();
        } catch (ApiException e) {
            System.err.println("Exception when calling ResortsApi#getResortSeasons");
            e.printStackTrace();
        }
        // TODO: test validations
    }
}
